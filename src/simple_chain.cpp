

#include "simple_chain.h"



/**
 * @Brief    01. 交易记录的最后数据的哈希与总的令牌信息进行进行再哈希，然后提交交易信息；
 *           02. 系统运行之初会产生创世块，分区存储分区的链块，分区根据实际交易量进行动态选举均衡；
 *           03. 每个分区均提供分区http服务，中心服务只负责分发任务，不进行业务计算；
 *           04. 节点用户提交请求时，先由分区哨兵进行竞争，取负荷最低的分区进行下发承载指令，而由其接管分区服务；
 *           05. 节点用户上线后，根据选举令牌，自动下载分区；
 *           06. 暂时不考虑软分叉及硬分叉，分叉规则先采取主动覆盖旧叉来规避；
 *           07. 提供分区过载的分区迁移，并能够隔离新旧分区；
 *           08. 分区的服务丢失由亲友分区自动承接丢失分区的服务，每个亲友分区备份相邻N个邻分区的数据；
 *           09. 客户节点可只提交数据以离线方式进行交易，也可以以在线方式更新分区数据后，进行交易；
 *           10. 共识算法：工作量证明，权益证明，股份授权证明，POOL验证池，还不明确。。。
 *           11. 节点进行首次提交时，进行一次组播，返回最优分区令牌，后面以单播的方式向指定令牌分区任务提交；
 *
 *           01. libevent 提供分区的http服务
 *           02. libcurl 用于提交业务请求
 *           03. openssl sha256进行哈希计算
 *           04. libz进行必要的数据压缩
 *           05. 必要的信息的传递使用RapidJson
 *           06. 
 *           
 * @DateTime 2018-07-16T18:13:08+0800
 * @Modify   2018-07-16T18:13:08+0800
 * @Author   Anyz
 */



